<?php

namespace Tests\Unit\Services\Transactions;

use App\Repositories\Transactions\TransactionsRepositoryInterface;
use App\Services\Core\ResultService;
use App\Services\Transactions\CreateService;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Validator;
use Tests\TestCase;

class CreateTransactionServiceTest extends TestCase
{
    protected $request;
    protected $data;
    protected function setUp(): void
    {
        $this->request();
        $this->data();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    protected function request()
    {
        $this->request = [
            'account_id' => '2658e4f7d01b424faac313d450f47608',
            'user_id' => '7f9c04160e504aba8ba4eac9e9275e1f',
            'category_id' => 2,
            'title' => 'test',
            'description' => 'test description',
            'transaction_date' => date('Y-m-d H:i:s'),
            'value_in' => 1000000,
        ];
    }

    protected function data()
    {
        $this->data = (object)[
            'id' => '82be072a53f541a38cb08e87285695b0',
            'account_id' => '2658e4f7d01b424faac313d450f47608',
            'user_id' => '7f9c04160e504aba8ba4eac9e9275e1f',
            'category_id' => 2,
            'title' => 'test',
            'description' => 'test description',
            'transaction_date' => date('Y-m-d H:i:s'),
            'value_in' => 1000000,
            'value_out' => 0,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];
    }

    public function testCreateTransactionSuccess()
    {
        $expected = ResultService::success($this->data);

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive(['all' => $this->request, 'file' => UploadedFile::fake()])->once();
        Validator::shouldReceive('make')->once()->andReturn(\Mockery::mock(['fails' => false]));
        $repository = \Mockery::mock(TransactionsRepositoryInterface::class);
        $repository->shouldReceive('create')->once()->andReturn($this->data);
        $images = \Mockery::mock(\App\Services\Images\CreateService::class);
        $images->shouldReceive('uploads')->once()->andReturnTrue();
        $service = new CreateService($repository, $images);
        $result = $service->create($request);
        $this->assertInstanceOf(\stdClass::class, $result);
        $this->assertEquals($expected, $result);
    }

    public function testCreateTransactionWithoutImageSuccess()
    {
        $expected = ResultService::success($this->data);

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive(['all' => $this->request, 'file' => null])->once();
        Validator::shouldReceive('make')->once()->andReturn(\Mockery::mock(['fails' => false]));
        $repository = \Mockery::mock(TransactionsRepositoryInterface::class);
        $repository->shouldReceive('create')->once()->andReturn($this->data);
        $images = \Mockery::mock(\App\Services\Images\CreateService::class);
        $service = new CreateService($repository, $images);
        $result = $service->create($request);
        $this->assertInstanceOf(\stdClass::class, $result);
        $this->assertEquals($expected, $result);
    }

    public function testCreateTransactionOnUploadImagesFailed()
    {
        $expected = ResultService::error();

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive(['all' => $this->request, 'file' => UploadedFile::fake()])->once();
        Validator::shouldReceive('make')->once()->andReturn(\Mockery::mock(['fails' => false]));
        $repository = \Mockery::mock(TransactionsRepositoryInterface::class);
        $images = \Mockery::mock(\App\Services\Images\CreateService::class);
        $images->shouldReceive('uploads')->once()->andThrow(new \Exception());
        $service = new CreateService($repository, $images);
        $result = $service->create($request);
        $this->assertInstanceOf(\stdClass::class, $result);
        $this->assertEquals($expected, $result);
    }

    public function testCreateTransactionFailed()
    {
        $expected = ResultService::error();

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive(['all' => $this->request, 'file' => UploadedFile::fake()])->once();
        Validator::shouldReceive('make')->once()->andReturn(\Mockery::mock(['fails' => false]));
        $repository = \Mockery::mock(TransactionsRepositoryInterface::class);
        $repository->shouldReceive('create')->once()->andThrow(new \Exception());
        $images = \Mockery::mock(\App\Services\Images\CreateService::class);
        $images->shouldReceive('uploads')->once()->andReturnTrue();
        $service = new CreateService($repository, $images);
        $result = $service->create($request);
        $this->assertInstanceOf(\stdClass::class, $result);
        $this->assertEquals($expected, $result);
    }

    public function testValidationFailed()
    {
        $message = 'The account id field is required.';
        $expected = ResultService::error($message);

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')->once()->andReturn(['value_in' => 1000000]);
        $repository = \Mockery::mock(TransactionsRepositoryInterface::class);
        $images = \Mockery::mock(\App\Services\Images\CreateService::class);
        $service = new CreateService($repository, $images);
        $result = $service->create($request);
        $this->assertInstanceOf(\stdClass::class, $result);
        $this->assertEquals($expected, $result);
    }

    public function testFileValidationFailed()
    {
        $message = 'The file must be a file of type: jpeg,png,jpg,gif,svg.';
        $expected = ResultService::error($message);

        $request = \Mockery::mock(Request::class);
        $request->shouldReceive('all')->once()->andReturn($this->request);
        Validator::shouldReceive('make')->once()->andReturn(\Mockery::mock([
            'fails' => true,
            'errors->first' => $message,
        ]));
        $repository = \Mockery::mock(TransactionsRepositoryInterface::class);
        $images = \Mockery::mock(\App\Services\Images\CreateService::class);
        $service = new CreateService($repository, $images);
        $result = $service->create($request);
        $this->assertInstanceOf(\stdClass::class, $result);
        $this->assertEquals($expected, $result);
    }
}
